{"version":3,"file":"js/38.b7f6621a.js","mappings":"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","sources":["webpack://darkfated-site/./src/views/BlogView.vue","webpack://darkfated-site/../src/defaults.ts","webpack://darkfated-site/../src/rules.ts","webpack://darkfated-site/../src/helpers.ts","webpack://darkfated-site/../src/Tokenizer.ts","webpack://darkfated-site/../src/Lexer.ts","webpack://darkfated-site/../src/Renderer.ts","webpack://darkfated-site/../src/TextRenderer.ts","webpack://darkfated-site/../src/Parser.ts","webpack://darkfated-site/../src/Hooks.ts","webpack://darkfated-site/../src/Instance.ts","webpack://darkfated-site/../src/marked.ts","webpack://darkfated-site/./src/blog/posts/firstpost.md","webpack://darkfated-site/./src/blog/blogService.js","webpack://darkfated-site/./src/views/BlogView.vue?ed56"],"sourcesContent":["<template>\r\n    <div class=\"blog\">\r\n        <section class=\"hero\">\r\n            <div class=\"container\">\r\n                <h1 class=\"title\">{{ currentPost ? currentPost.title : 'Блог' }}</h1>\r\n                <p class=\"subtitle\" v-if=\"!currentPost\">Мои мысли :&gt;</p>\r\n                <p class=\"subtitle\" v-else>{{ formatDate(currentPost.date) }}</p>\r\n\r\n                <div v-if=\"!currentPost\" class=\"search-wrap\">\r\n                    <input v-model=\"searchQuery\" class=\"search-input\" type=\"text\" placeholder=\"Поиск по блогу...\" />\r\n                </div>\r\n\r\n                <div v-if=\"currentPost\" class=\"post-nav\">\r\n                    <button @click=\"backToList\" class=\"btn-back\">← К списку</button>\r\n                </div>\r\n            </div>\r\n        </section>\r\n\r\n        <section class=\"content\">\r\n            <div class=\"container content-grid\">\r\n                <transition-group name=\"cards\" tag=\"div\" class=\"cards-grid\" v-if=\"!currentPost && !loading && !error\">\r\n                    <article v-for=\"post in filteredPosts\" :key=\"post.slug\" class=\"card\"\r\n                        @click=\"navigateToPost(post.slug)\" role=\"button\" tabindex=\"0\"\r\n                        @keydown.enter.prevent=\"navigateToPost(post.slug)\">\r\n                        <h2 class=\"card-title\">{{ post.title || 'Без названия' }}</h2>\r\n                        <p class=\"card-desc\">{{ post.description || 'Нет описания' }}</p>\r\n\r\n                        <div class=\"card-meta\">\r\n                            <time class=\"date\">{{ formatDate(post.date) }}</time>\r\n                            <div class=\"tags\" v-if=\"post.tags && post.tags.length\">\r\n                                <span v-for=\"(t, i) in post.tags.slice(0, 3)\" :key=\"i\" class=\"tag\">{{ t }}</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"card-actions\">\r\n                            <button class=\"btn-read\" @click.stop.prevent=\"navigateToPost(post.slug)\">Читать</button>\r\n                        </div>\r\n                    </article>\r\n                </transition-group>\r\n\r\n                <div v-if=\"!currentPost && filteredPosts.length === 0 && !loading && !error\" class=\"empty glass\">\r\n                    <h3>Блоги не найдены</h3>\r\n                    <p>Нет доступных публикаций или ничего не подходит под запрос.</p>\r\n                </div>\r\n\r\n                <div v-if=\"loading\" class=\"loading glass\">\r\n                    <div class=\"spinner\"></div>\r\n                    <p>Загрузка...</p>\r\n                </div>\r\n\r\n                <div v-if=\"error\" class=\"error glass\">\r\n                    <h3>Ошибка</h3>\r\n                    <p>{{ error }}</p>\r\n                    <button class=\"btn-back\" @click=\"backToList\">К списку</button>\r\n                </div>\r\n\r\n                <transition name=\"post\">\r\n                    <article v-if=\"currentPost && !loading && !error\" class=\"post glass\">\r\n                        <div class=\"post-head\">\r\n                            <div class=\"post-tags\" v-if=\"currentPost.tags && currentPost.tags.length\">\r\n                                <span v-for=\"(t, i) in currentPost.tags\" :key=\"i\" class=\"tag\">{{ t }}</span>\r\n                            </div>\r\n                            <h2 class=\"post-title\">{{ currentPost.title }}</h2>\r\n                            <div class=\"post-info\">{{ formatDate(currentPost.date) }}</div>\r\n                        </div>\r\n\r\n                        <div class=\"post-body markdown-body\" v-html=\"currentPost.html\"></div>\r\n\r\n                        <div class=\"post-footer\">\r\n                            <button class=\"btn-back\" @click=\"backToList\">← Назад</button>\r\n                        </div>\r\n                    </article>\r\n                </transition>\r\n            </div>\r\n        </section>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { getAllPosts, getPostBySlug, formatDate } from '@/blog/blogService';\r\n\r\nexport default {\r\n    name: 'BlogView',\r\n    data() {\r\n        return {\r\n            posts: [],\r\n            currentPost: null,\r\n            searchQuery: '',\r\n            loading: false,\r\n            error: null\r\n        };\r\n    },\r\n    computed: {\r\n        slug() {\r\n            return this.$route.params.slug;\r\n        },\r\n        filteredPosts() {\r\n            if (!this.searchQuery) return this.posts;\r\n            const q = this.searchQuery.trim().toLowerCase();\r\n            return this.posts.filter(p =>\r\n                (p.title || '').toLowerCase().includes(q) ||\r\n                (p.description || '').toLowerCase().includes(q) ||\r\n                (p.tags || []).some(t => t.toLowerCase().includes(q))\r\n            );\r\n        }\r\n    },\r\n    methods: {\r\n        formatDate,\r\n        async loadPosts() {\r\n            this.loading = true;\r\n            this.error = null;\r\n            try {\r\n                this.posts = (await getAllPosts()) || [];\r\n                if (this.slug) {\r\n                    await this.loadCurrentPost();\r\n                } else {\r\n                    this.currentPost = null;\r\n                }\r\n            } catch (e) {\r\n                this.error = 'Ошибка при загрузке постов. Попробуйте позже.';\r\n                console.error(e);\r\n            } finally {\r\n                this.loading = false;\r\n            }\r\n        },\r\n        async loadCurrentPost() {\r\n            this.loading = true;\r\n            this.error = null;\r\n            try {\r\n                this.currentPost = await getPostBySlug(this.slug);\r\n                if (!this.currentPost) {\r\n                    this.error = 'Пост не найден';\r\n                }\r\n            } catch (e) {\r\n                this.error = 'Ошибка при загрузке поста';\r\n                console.error(e);\r\n            } finally {\r\n                this.loading = false;\r\n            }\r\n        },\r\n        navigateToPost(slug) {\r\n            this.$router.push({ name: 'BlogPost', params: { slug } });\r\n        },\r\n        backToList() {\r\n            this.$router.push({ name: 'Blog' });\r\n        }\r\n    },\r\n    watch: {\r\n        '$route.params.slug'() {\r\n            if (this.slug) {\r\n                this.loadCurrentPost();\r\n            } else {\r\n                this.currentPost = null;\r\n            }\r\n        }\r\n    },\r\n    created() {\r\n        this.loadPosts();\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n:root {\r\n    --dark-bg: #0f1224;\r\n    --glass-border: rgba(255, 255, 255, 0.06);\r\n    --primary-color: #6f4bff;\r\n    --text-color: #dbe5ff;\r\n    --muted: #9aa7c7;\r\n    --glass-shadow: 0 10px 30px rgba(6, 7, 14, 0.6);\r\n    --glass-blur: 10px;\r\n    --card-gap: 18px;\r\n}\r\n\r\n.blog {\r\n    min-height: 100vh;\r\n    background: linear-gradient(180deg, rgba(12, 13, 20, 1) 0%, rgba(18, 19, 32, 1) 100%);\r\n    color: var(--text-color);\r\n    padding: 36px 16px;\r\n    font-family: Inter, \"Segoe UI\", Roboto, system-ui, -apple-system, \"Helvetica Neue\", Arial;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n.container {\r\n    max-width: 1100px;\r\n    margin: 0 auto;\r\n    padding: 0 14px;\r\n}\r\n\r\n.blog .container {\r\n    padding-left: 22px;\r\n    padding-right: 14px;\r\n}\r\n\r\n@media (max-width: 700px) {\r\n    .blog .container {\r\n        padding-left: 16px;\r\n        padding-right: 12px;\r\n    }\r\n}\r\n\r\n@media (max-width: 420px) {\r\n    .blog .container {\r\n        padding-left: 12px;\r\n        padding-right: 10px;\r\n    }\r\n}\r\n\r\n.title {\r\n    font-size: 2.1rem;\r\n    margin: 2px 0 6px;\r\n    color: var(--text-color);\r\n}\r\n\r\n.subtitle {\r\n    color: var(--muted);\r\n    margin-bottom: 12px;\r\n}\r\n\r\n.search-wrap {\r\n    max-width: 640px;\r\n    margin: 10px auto 0;\r\n}\r\n\r\n.search-input {\r\n    width: 100%;\r\n    padding: 12px 16px;\r\n    border-radius: 999px;\r\n    border: 1px solid var(--glass-border);\r\n    background: linear-gradient(180deg, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.00));\r\n    color: var(--text-color);\r\n    font-size: 1rem;\r\n    box-shadow: 0 6px 18px rgba(7, 8, 15, 0.45);\r\n    transition: box-shadow 0.18s, border-color 0.18s;\r\n}\r\n\r\n.search-input:focus {\r\n    outline: none;\r\n    border-color: var(--primary-color);\r\n    box-shadow: 0 12px 36px rgba(111, 75, 255, 0.08);\r\n}\r\n\r\n.content {\r\n    padding-top: 20px;\r\n}\r\n\r\n.content-grid {\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    gap: var(--card-gap);\r\n}\r\n\r\n.cards-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(340px, 1fr));\r\n    gap: var(--card-gap);\r\n    width: 100%;\r\n}\r\n\r\n.card {\r\n    padding: 20px;\r\n    border-radius: 12px;\r\n    background: linear-gradient(135deg, rgba(255, 255, 255, 0.02), rgba(255, 255, 255, 0.01));\r\n    border: 1px solid var(--glass-border);\r\n    box-shadow: var(--glass-shadow);\r\n    backdrop-filter: blur(var(--glass-blur));\r\n    cursor: pointer;\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-height: 220px;\r\n    transition: transform 0.18s ease, box-shadow 0.18s ease, border-color 0.18s;\r\n}\r\n\r\n.card:focus {\r\n    outline: none;\r\n    transform: translateY(-4px);\r\n    box-shadow: 0 18px 50px rgba(111, 75, 255, 0.08);\r\n}\r\n\r\n.card:hover {\r\n    transform: translateY(-6px);\r\n    box-shadow: 0 20px 60px rgba(6, 7, 20, 0.6);\r\n    border-color: rgba(111, 75, 255, 0.12);\r\n}\r\n\r\n.card-title {\r\n    margin: 0 0 10px;\r\n    color: var(--primary-color);\r\n    font-size: 1.25rem;\r\n    line-height: 1.2;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 2;\r\n    -webkit-box-orient: vertical;\r\n    overflow: hidden;\r\n}\r\n\r\n.card-desc {\r\n    color: var(--muted);\r\n    margin: 0 0 12px;\r\n    flex-grow: 1;\r\n    line-height: 1.5;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 4;\r\n    -webkit-box-orient: vertical;\r\n    overflow: hidden;\r\n}\r\n\r\n.card-meta {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    gap: 10px;\r\n    margin-bottom: 12px;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.date {\r\n    font-size: 0.85rem;\r\n    color: var(--muted);\r\n}\r\n\r\n.tags {\r\n    display: flex;\r\n    gap: 8px;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.tag {\r\n    background: rgba(111, 75, 255, 0.08);\r\n    color: var(--primary-color);\r\n    padding: 4px 8px;\r\n    border-radius: 999px;\r\n    font-size: 0.78rem;\r\n    border: 1px solid rgba(111, 75, 255, 0.06);\r\n}\r\n\r\n.card-actions {\r\n    display: flex;\r\n    gap: 10px;\r\n    align-items: center;\r\n}\r\n\r\n.btn-read {\r\n    background: transparent;\r\n    border: 1px solid rgba(255, 255, 255, 0.06);\r\n    padding: 8px 12px;\r\n    color: var(--text-color);\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n.empty {\r\n    text-align: center;\r\n    padding: 40px;\r\n    border-radius: 12px;\r\n    margin: 0 auto;\r\n    max-width: 640px;\r\n}\r\n\r\n.loading,\r\n.error {\r\n    text-align: center;\r\n    padding: 28px;\r\n    border-radius: 12px;\r\n    max-width: 640px;\r\n    margin: 0 auto;\r\n}\r\n\r\n.spinner {\r\n    width: 44px;\r\n    height: 44px;\r\n    border: 5px solid rgba(111, 75, 255, 0.12);\r\n    border-top-color: var(--primary-color);\r\n    border-radius: 50%;\r\n    margin: 6px auto 14px;\r\n    animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n    to {\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n\r\n.post {\r\n    margin: 0 auto;\r\n    padding: 26px;\r\n    border-radius: 12px;\r\n    max-width: 900px;\r\n    background: linear-gradient(135deg, rgba(255, 255, 255, 0.02), rgba(255, 255, 255, 0.00));\r\n    border: 1px solid var(--glass-border);\r\n    box-shadow: var(--glass-shadow);\r\n}\r\n\r\n.post-head {\r\n    margin-bottom: 18px;\r\n}\r\n\r\n.post-title {\r\n    margin: 6px 0 8px;\r\n    color: var(--text-color);\r\n    font-size: 1.6rem;\r\n}\r\n\r\n.post-info {\r\n    color: var(--muted);\r\n    font-size: 0.9rem;\r\n    margin-bottom: 12px;\r\n}\r\n\r\n.post-tags {\r\n    display: flex;\r\n    gap: 8px;\r\n    flex-wrap: wrap;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.post-body {\r\n    margin-top: 6px;\r\n    line-height: 1.7;\r\n}\r\n\r\n.post-footer {\r\n    margin-top: 28px;\r\n    border-top: 1px solid var(--glass-border);\r\n    padding-top: 16px;\r\n}\r\n\r\n.btn-back {\r\n    background: transparent;\r\n    color: var(--primary-color);\r\n    border: 1px solid var(--primary-color);\r\n    padding: 8px 12px;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n.cards-enter-active,\r\n.cards-leave-active {\r\n    transition: all 0.25s;\r\n}\r\n\r\n.cards-enter,\r\n.cards-leave-to {\r\n    opacity: 0;\r\n    transform: translateY(6px);\r\n}\r\n\r\n.post-enter-active,\r\n.post-leave-active {\r\n    transition: opacity 0.22s, transform 0.22s;\r\n}\r\n\r\n.post-enter,\r\n.post-leave-to {\r\n    opacity: 0;\r\n    transform: translateY(6px);\r\n}\r\n\r\n:deep(.markdown-body) {\r\n    color: var(--text-color);\r\n    line-height: 1.7;\r\n    font-size: 1.02rem;\r\n}\r\n\r\n:deep(.markdown-body h1) {\r\n    font-size: 1.8rem;\r\n    color: var(--primary-color);\r\n    margin: 0.8em 0;\r\n}\r\n\r\n:deep(.markdown-body h2) {\r\n    font-size: 1.4rem;\r\n    margin: 1.2em 0 0.6em;\r\n}\r\n\r\n:deep(.markdown-body p) {\r\n    margin: 0.9em 0;\r\n}\r\n\r\n:deep(.markdown-body pre) {\r\n    background: rgba(0, 0, 0, 0.3);\r\n    padding: 1em;\r\n    border-radius: 6px;\r\n    overflow-x: auto;\r\n}\r\n\r\n@media (max-width: 1000px) {\r\n    .cards-grid {\r\n        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n    }\r\n\r\n    .card {\r\n        min-height: 200px;\r\n    }\r\n\r\n    .post {\r\n        padding: 22px;\r\n    }\r\n}\r\n\r\n@media (max-width: 700px) {\r\n    .container {\r\n        padding: 0 12px;\r\n    }\r\n\r\n    .cards-grid {\r\n        grid-template-columns: 1fr;\r\n        gap: 14px;\r\n    }\r\n\r\n    .search-wrap {\r\n        max-width: 100%;\r\n        margin: 10px 0 8px;\r\n    }\r\n\r\n    .card {\r\n        padding: 16px;\r\n        min-height: 160px;\r\n    }\r\n\r\n    .card-title {\r\n        font-size: 1.05rem;\r\n    }\r\n\r\n    .card-desc {\r\n        display: -webkit-box;\r\n        -webkit-line-clamp: 3;\r\n    }\r\n\r\n    .post {\r\n        padding: 18px;\r\n    }\r\n\r\n    :deep(.markdown-body) {\r\n        font-size: 0.98rem;\r\n    }\r\n}\r\n\r\n@media (max-width: 420px) {\r\n    .title {\r\n        font-size: 1.45rem;\r\n    }\r\n\r\n    .search-input {\r\n        padding: 10px 12px;\r\n        font-size: 0.95rem;\r\n    }\r\n\r\n    .card {\r\n        padding: 14px;\r\n    }\r\n\r\n    .card-title {\r\n        font-size: 1rem;\r\n    }\r\n\r\n    .btn-read {\r\n        padding: 6px 10px;\r\n        font-size: 0.85rem;\r\n    }\r\n\r\n    .post {\r\n        padding: 14px;\r\n    }\r\n\r\n    :deep(.markdown-body) {\r\n        font-size: 0.95rem;\r\n    }\r\n}\r\n</style>\r\n","import type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Gets the original marked default options.\n */\nexport function _getDefaults(): MarkedOptions {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null,\n  };\n}\n\nexport let _defaults = _getDefaults();\n\nexport function changeDefaults(newDefaults: MarkedOptions) {\n  _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null } as unknown as RegExp;\n\nfunction edit(regex: string | RegExp, opt = '') {\n  let source = typeof regex === 'string' ? regex : regex.source;\n  const obj = {\n    replace: (name: string | RegExp, val: string | RegExp) => {\n      let valSource = typeof val === 'string' ? val : val.source;\n      valSource = valSource.replace(other.caret, '$1');\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(source, opt);\n    },\n  };\n  return obj;\n}\n\nexport const other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: (bull: string) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n  nextBulletRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n  hrRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n  fencesBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n  headingBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n  htmlBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n\n/**\n * Block-Level Grammar\n */\n\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/\\|table/g, '') // table not in commonmark\n  .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n  .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n  .replace('label', _blockLabel)\n  .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n  .getRegex();\n\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n  .replace(/bull/g, bullet)\n  .getRegex();\n\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n  + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit(\n  '^ {0,3}(?:' // optional indentation\n+ '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n+ '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n+ '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n+ '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n+ '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n+ '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n+ '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n+ '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n+ ')', 'i')\n  .replace('comment', _comment)\n  .replace('tag', _tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst paragraph = edit(_paragraph)\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n  .replace('paragraph', paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nconst blockNormal = {\n  blockquote,\n  code: blockCode,\n  def,\n  fences,\n  heading,\n  hr,\n  html,\n  lheading,\n  list,\n  newline,\n  paragraph,\n  table: noopTest,\n  text: blockText,\n};\n\ntype BlockKeys = keyof typeof blockNormal;\n\n/**\n * GFM Block Grammar\n */\n\nconst gfmTable = edit(\n  '^ *([^\\\\n ].*)\\\\n' // Header\n+ ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n+ '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockGfm: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('table', gfmTable) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex(),\n};\n\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nconst blockPedantic: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', _comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', lheading)\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .replace('|tag', '')\n    .getRegex(),\n};\n\n/**\n * Inline-Level Grammar\n */\n\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n  .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\n\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\n\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\nconst emStrongRDelimAstCore =\n  '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n+ '|[^*]+(?=[^*])' // Consume to delim\n+ '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n+ '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n+ '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n+ '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\n\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n  .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit(\n  '^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n+ '|[^_]+(?=[^_])' // Consume to delim\n+ '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n+ '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n+ '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n+ '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n+ '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n  .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n  .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n  .getRegex();\n\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit(\n  '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n  .replace('comment', _inlineComment)\n  .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n  .replace('label', _inlineLabel)\n  .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n  .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n  .getRegex();\n\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n  .replace('label', _inlineLabel)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n  .replace('reflink', reflink)\n  .replace('nolink', nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\nconst inlineNormal = {\n  _backpedal: noopTest, // only used for GFM url\n  anyPunctuation,\n  autolink,\n  blockSkip,\n  br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim,\n  emStrongRDelimAst,\n  emStrongRDelimUnd,\n  escape,\n  link,\n  nolink,\n  punctuation,\n  reflink,\n  reflinkSearch,\n  tag,\n  text: inlineText,\n  url: noopTest,\n};\n\ntype InlineKeys = keyof typeof inlineNormal;\n\n/**\n * Pedantic Inline Grammar\n */\n\nconst inlinePedantic: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n};\n\n/**\n * GFM Inline Grammar\n */\n\nconst inlineGfm: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n    .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\nconst inlineBreaks: Record<InlineKeys, RegExp> = {\n  ...inlineGfm,\n  br: edit(br).replace('{2,}', '*').getRegex(),\n  text: edit(inlineGfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex(),\n};\n\n/**\n * exports\n */\n\nexport const block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic,\n};\n\nexport const inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic,\n};\n\nexport interface Rules {\n  other: typeof other\n  block: Record<BlockKeys, RegExp>\n  inline: Record<InlineKeys, RegExp>\n}\n","import { other } from './rules.ts';\n\n/**\n * Helpers\n */\nconst escapeReplacements: { [index: string]: string } = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch: string) => escapeReplacements[ch];\n\nexport function escape(html: string, encode?: boolean) {\n  if (encode) {\n    if (other.escapeTest.test(html)) {\n      return html.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html)) {\n      return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nexport function unescape(html: string) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(other.unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nexport function cleanUrl(href: string) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, '%');\n  } catch {\n    return null;\n  }\n  return href;\n}\n\nexport function splitCells(tableRow: string, count?: number) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n      let escaped = false;\n      let curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(other.splitPipe);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells.at(-1)?.trim()) {\n    cells.pop();\n  }\n\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push('');\n    }\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str: string, c: string, invert?: boolean) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nexport function findClosingBracket(str: string, b: string) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  let level = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  if (level > 0) {\n    return -2;\n  }\n\n  return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  rtrim,\n  splitCells,\n  findClosingBracket,\n} from './helpers.ts';\nimport type { Rules } from './rules.ts';\nimport type { _Lexer } from './Lexer.ts';\nimport type { Links, Tokens, Token } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nfunction outputLink(cap: string[], link: Pick<Tokens.Link, 'href' | 'title'>, raw: string, lexer: _Lexer, rules: Rules): Tokens.Link | Tokens.Image {\n  const href = link.href;\n  const title = link.title || null;\n  const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n\n  lexer.state.inLink = true;\n  const token: Tokens.Link | Tokens.Image = {\n    type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n    raw,\n    href,\n    title,\n    text,\n    tokens: lexer.inlineTokens(text),\n  };\n  lexer.state.inLink = false;\n  return token;\n}\n\nfunction indentCodeCompensation(raw: string, text: string, rules: Rules) {\n  const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(rules.other.beginningSpace);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n  options: MarkedOptions;\n  rules!: Rules; // set by the lexer\n  lexer!: _Lexer; // set by the lexer\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  space(src: string): Tokens.Space | undefined {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0],\n      };\n    }\n  }\n\n  code(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text,\n      };\n    }\n  }\n\n  fences(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n        text,\n      };\n    }\n  }\n\n  heading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (this.rules.other.endingHash.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  hr(src: string): Tokens.Hr | undefined {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: rtrim(cap[0], '\\n'),\n      };\n    }\n  }\n\n  blockquote(src: string): Tokens.Blockquote | undefined {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      let lines = rtrim(cap[0], '\\n').split('\\n');\n      let raw = '';\n      let text = '';\n      const tokens: Token[] = [];\n\n      while (lines.length > 0) {\n        let inBlockquote = false;\n        const currentLines = [];\n\n        let i;\n        for (i = 0; i < lines.length; i++) {\n          // get lines up to a continuation\n          if (this.rules.other.blockquoteStart.test(lines[i])) {\n            currentLines.push(lines[i]);\n            inBlockquote = true;\n          } else if (!inBlockquote) {\n            currentLines.push(lines[i]);\n          } else {\n            break;\n          }\n        }\n        lines = lines.slice(i);\n\n        const currentRaw = currentLines.join('\\n');\n        const currentText = currentRaw\n          // precede setext continuation with 4 spaces so it isn't a setext\n          .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n          .replace(this.rules.other.blockquoteSetextReplace2, '');\n        raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n        text = text ? `${text}\\n${currentText}` : currentText;\n\n        // parse blockquote lines as top level tokens\n        // merge paragraphs if this is a continuation\n        const top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        this.lexer.blockTokens(currentText, tokens, true);\n        this.lexer.state.top = top;\n\n        // if there is no continuation then we are done\n        if (lines.length === 0) {\n          break;\n        }\n\n        const lastToken = tokens.at(-1);\n\n        if (lastToken?.type === 'code') {\n          // blockquote continuation cannot be preceded by a code block\n          break;\n        } else if (lastToken?.type === 'blockquote') {\n          // include continuation in nested blockquote\n          const oldToken = lastToken as Tokens.Blockquote;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.blockquote(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n          break;\n        } else if (lastToken?.type === 'list') {\n          // include continuation in nested list\n          const oldToken = lastToken as Tokens.List;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.list(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n          lines = newText.substring(tokens.at(-1)!.raw.length).split('\\n');\n          continue;\n        }\n      }\n\n      return {\n        type: 'blockquote',\n        raw,\n        tokens,\n        text,\n      };\n    }\n  }\n\n  list(src: string): Tokens.List | undefined {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list: Tokens.List = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: [],\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = this.rules.other.listItemRegex(bull);\n      let endsWithBlankLine = false;\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        let endEarly = false;\n        let raw = '';\n        let itemContents = '';\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t: string) => ' '.repeat(3 * t.length));\n        let nextLine = src.split('\\n', 1)[0];\n        let blankLine = !line.trim();\n\n        let indent = 0;\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else if (blankLine) {\n          indent = cap[1].length + 1;\n        } else {\n          indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n          const hrRegex = this.rules.other.hrRegex(indent);\n          const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n          const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n          const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            const rawLine = src.split('\\n', 1)[0];\n            let nextLineWithoutTabs;\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n              nextLineWithoutTabs = nextLine;\n            } else {\n              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of html block\n            if (htmlBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(nextLine)) {\n              break;\n            }\n\n            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLineWithoutTabs.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (this.rules.other.doubleBlankLine.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        let istask: RegExpExecArray | null = null;\n        let ischecked: boolean | undefined;\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = this.rules.other.listIsTask.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: [],\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      const lastItem = list.items.at(-1);\n      if (lastItem) {\n        lastItem.raw = lastItem.raw.trimEnd();\n        lastItem.text = lastItem.text.trimEnd();\n      } else {\n        // not a list since there were no items\n        return;\n      }\n      list.raw = list.raw.trimEnd();\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (let i = 0; i < list.items.length; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (let i = 0; i < list.items.length; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src: string): Tokens.HTML | undefined {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token: Tokens.HTML = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n        text: cap[0],\n      };\n      return token;\n    }\n  }\n\n  def(src: string): Tokens.Def | undefined {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title,\n      };\n    }\n  }\n\n  table(src: string): Tokens.Table | undefined {\n    const cap = this.rules.block.table.exec(src);\n    if (!cap) {\n      return;\n    }\n\n    if (!this.rules.other.tableDelimiter.test(cap[2])) {\n      // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n      return;\n    }\n\n    const headers = splitCells(cap[1]);\n    const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n    const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n\n    const item: Tokens.Table = {\n      type: 'table',\n      raw: cap[0],\n      header: [],\n      align: [],\n      rows: [],\n    };\n\n    if (headers.length !== aligns.length) {\n      // header and align columns must be equal, rows can be different.\n      return;\n    }\n\n    for (const align of aligns) {\n      if (this.rules.other.tableAlignRight.test(align)) {\n        item.align.push('right');\n      } else if (this.rules.other.tableAlignCenter.test(align)) {\n        item.align.push('center');\n      } else if (this.rules.other.tableAlignLeft.test(align)) {\n        item.align.push('left');\n      } else {\n        item.align.push(null);\n      }\n    }\n\n    for (let i = 0; i < headers.length; i++) {\n      item.header.push({\n        text: headers[i],\n        tokens: this.lexer.inline(headers[i]),\n        header: true,\n        align: item.align[i],\n      });\n    }\n\n    for (const row of rows) {\n      item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n        return {\n          text: cell,\n          tokens: this.lexer.inline(cell),\n          header: false,\n          align: item.align[i],\n        };\n      }));\n    }\n\n    return item;\n  }\n\n  lheading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1]),\n      };\n    }\n  }\n\n  paragraph(src: string): Tokens.Paragraph | undefined {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  text(src: string): Tokens.Text | undefined {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0]),\n      };\n    }\n  }\n\n  escape(src: string): Tokens.Escape | undefined {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: cap[1],\n      };\n    }\n  }\n\n  tag(src: string): Tokens.Tag | undefined {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0],\n      };\n    }\n  }\n\n  link(src: string): Tokens.Link | Tokens.Image | undefined {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex === -2) {\n          // more open parens than closed\n          return;\n        }\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = this.rules.other.pedanticHrefTitle.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (this.rules.other.startAngleBracket.test(href)) {\n        if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n        title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n      }, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  reflink(src: string, links: Links): Tokens.Link | Tokens.Image | Tokens.Text | undefined {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n      || (cap = this.rules.inline.nolink.exec(src))) {\n      const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const link = links[linkString.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text,\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  emStrong(src: string, maskedSrc: string, prevChar = ''): Tokens.Em | Tokens.Strong | undefined {\n    let match = this.rules.inline.emStrongLDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n      const lLength = [...match[0]].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = [...rDelim].length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        // char length can be >1 for unicode characters;\n        const lastCharLength = [...match[0]][0].length;\n        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text),\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text),\n        };\n      }\n    }\n  }\n\n  codespan(src: string): Tokens.Codespan | undefined {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n      const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n      const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text,\n      };\n    }\n  }\n\n  br(src: string): Tokens.Br | undefined {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0],\n      };\n    }\n  }\n\n  del(src: string): Tokens.Del | undefined {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2]),\n      };\n    }\n  }\n\n  autolink(src: string): Tokens.Link | undefined {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[1];\n        href = 'mailto:' + text;\n      } else {\n        text = cap[1];\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  url(src: string): Tokens.Link | undefined {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[0];\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n        } while (prevCapZero !== cap[0]);\n        text = cap[0];\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  inlineText(src: string): Tokens.Text | undefined {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      const escaped = this.lexer.state.inRawBlock;\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        escaped,\n      };\n    }\n  }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\nimport type { Token, TokensList, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Block Lexer\n */\nexport class _Lexer {\n  tokens: TokensList;\n  options: MarkedOptions;\n  state: {\n    inLink: boolean;\n    inRawBlock: boolean;\n    top: boolean;\n  };\n\n  private tokenizer: _Tokenizer;\n  private inlineQueue: { src: string, tokens: Token[] }[];\n\n  constructor(options?: MarkedOptions) {\n    // TokenList cannot be created in one go\n    this.tokens = [] as unknown as TokensList;\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true,\n    };\n\n    const rules = {\n      other,\n      block: block.normal,\n      inline: inline.normal,\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline,\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src: string) {\n    src = src.replace(other.carriageReturn, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    for (let i = 0; i < this.inlineQueue.length; i++) {\n      const next = this.inlineQueue[i];\n      this.inlineTokens(next.src, next.tokens);\n    }\n    this.inlineQueue = [];\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src: string, tokens?: Token[], lastParagraphClipped?: boolean): Token[];\n  blockTokens(src: string, tokens?: TokensList, lastParagraphClipped?: boolean): TokensList;\n  blockTokens(src: string, tokens: Token[] = [], lastParagraphClipped = false) {\n    if (this.options.pedantic) {\n      src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n    }\n\n    while (src) {\n      let token: Tokens.Generic | undefined;\n\n      if (this.options.extensions?.block?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.raw.length === 1 && lastToken !== undefined) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unnecessary paragraph tags\n          lastToken.raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title,\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        const lastToken = tokens.at(-1);\n        if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src: string, tokens: Token[] = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src: string, tokens: Token[] = []): Token[] {\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match: RegExpExecArray | null = null;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index)\n              + '[' + 'a'.repeat(match[0].length - 2) + ']'\n              + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    let keepPrevChar = false;\n    let prevChar = '';\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      let token: Tokens.Generic | undefined;\n\n      // extensions\n      if (this.options.extensions?.inline?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.type === 'text' && lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  cleanUrl,\n  escape,\n} from './helpers.ts';\nimport { other } from './rules.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Tokens } from './Tokens.ts';\nimport type { _Parser } from './Parser.ts';\n\n/**\n * Renderer\n */\nexport class _Renderer {\n  options: MarkedOptions;\n  parser!: _Parser; // set by the parser\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  space(token: Tokens.Space): string {\n    return '';\n  }\n\n  code({ text, lang, escaped }: Tokens.Code): string {\n    const langString = (lang || '').match(other.notSpaceStart)?.[0];\n\n    const code = text.replace(other.endingNewline, '') + '\\n';\n\n    if (!langString) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"language-'\n      + escape(langString)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  blockquote({ tokens }: Tokens.Blockquote): string {\n    const body = this.parser.parse(tokens);\n    return `<blockquote>\\n${body}</blockquote>\\n`;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag) : string {\n    return text;\n  }\n\n  heading({ tokens, depth }: Tokens.Heading): string {\n    return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n  }\n\n  hr(token: Tokens.Hr): string {\n    return '<hr>\\n';\n  }\n\n  list(token: Tokens.List): string {\n    const ordered = token.ordered;\n    const start = token.start;\n\n    let body = '';\n    for (let j = 0; j < token.items.length; j++) {\n      const item = token.items[j];\n      body += this.listitem(item);\n    }\n\n    const type = ordered ? 'ol' : 'ul';\n    const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(item: Tokens.ListItem): string {\n    let itemBody = '';\n    if (item.task) {\n      const checkbox = this.checkbox({ checked: !!item.checked });\n      if (item.loose) {\n        if (item.tokens[0]?.type === 'paragraph') {\n          item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n            item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n            item.tokens[0].tokens[0].escaped = true;\n          }\n        } else {\n          item.tokens.unshift({\n            type: 'text',\n            raw: checkbox + ' ',\n            text: checkbox + ' ',\n            escaped: true,\n          });\n        }\n      } else {\n        itemBody += checkbox + ' ';\n      }\n    }\n\n    itemBody += this.parser.parse(item.tokens, !!item.loose);\n\n    return `<li>${itemBody}</li>\\n`;\n  }\n\n  checkbox({ checked }: Tokens.Checkbox): string {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\">';\n  }\n\n  paragraph({ tokens }: Tokens.Paragraph): string {\n    return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n  }\n\n  table(token: Tokens.Table): string {\n    let header = '';\n\n    // header\n    let cell = '';\n    for (let j = 0; j < token.header.length; j++) {\n      cell += this.tablecell(token.header[j]);\n    }\n    header += this.tablerow({ text: cell });\n\n    let body = '';\n    for (let j = 0; j < token.rows.length; j++) {\n      const row = token.rows[j];\n\n      cell = '';\n      for (let k = 0; k < row.length; k++) {\n        cell += this.tablecell(row[k]);\n      }\n\n      body += this.tablerow({ text: cell });\n    }\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  tablerow({ text }: Tokens.TableRow): string {\n    return `<tr>\\n${text}</tr>\\n`;\n  }\n\n  tablecell(token: Tokens.TableCell): string {\n    const content = this.parser.parseInline(token.tokens);\n    const type = token.header ? 'th' : 'td';\n    const tag = token.align\n      ? `<${type} align=\"${token.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   */\n  strong({ tokens }: Tokens.Strong): string {\n    return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n  }\n\n  em({ tokens }: Tokens.Em): string {\n    return `<em>${this.parser.parseInline(tokens)}</em>`;\n  }\n\n  codespan({ text }: Tokens.Codespan): string {\n    return `<code>${escape(text, true)}</code>`;\n  }\n\n  br(token: Tokens.Br): string {\n    return '<br>';\n  }\n\n  del({ tokens }: Tokens.Del): string {\n    return `<del>${this.parser.parseInline(tokens)}</del>`;\n  }\n\n  link({ href, title, tokens }: Tokens.Link): string {\n    const text = this.parser.parseInline(tokens);\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text;\n    }\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + (escape(title)) + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image({ href, title, text, tokens }: Tokens.Image): string {\n    if (tokens) {\n      text = this.parser.parseInline(tokens, this.parser.textRenderer);\n    }\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return escape(text);\n    }\n    href = cleanHref;\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${escape(title)}\"`;\n    }\n    out += '>';\n    return out;\n  }\n\n  text(token: Tokens.Text | Tokens.Escape) : string {\n    return 'tokens' in token && token.tokens\n      ? this.parser.parseInline(token.tokens)\n      : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n  }\n}\n","import type { Tokens } from './Tokens.ts';\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n  // no need for block level renderers\n  strong({ text }: Tokens.Strong) {\n    return text;\n  }\n\n  em({ text }: Tokens.Em) {\n    return text;\n  }\n\n  codespan({ text }: Tokens.Codespan) {\n    return text;\n  }\n\n  del({ text }: Tokens.Del) {\n    return text;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag) {\n    return text;\n  }\n\n  text({ text }: Tokens.Text | Tokens.Escape | Tokens.Tag) {\n    return text;\n  }\n\n  link({ text }: Tokens.Link) {\n    return '' + text;\n  }\n\n  image({ text }: Tokens.Image) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\nimport type { MarkedToken, Token, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n  options: MarkedOptions;\n  renderer: _Renderer;\n  textRenderer: _TextRenderer;\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens: Token[], top = true): string {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const genericToken = anyToken as Tokens.Generic;\n        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'space': {\n          out += this.renderer.space(token);\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr(token);\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(token);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token);\n          continue;\n        }\n        case 'table': {\n          out += this.renderer.table(token);\n          continue;\n        }\n        case 'blockquote': {\n          out += this.renderer.blockquote(token);\n          continue;\n        }\n        case 'list': {\n          out += this.renderer.list(token);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(token);\n          continue;\n        }\n        case 'text': {\n          let textToken = token;\n          let body = this.renderer.text(textToken);\n          while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n            textToken = tokens[++i] as Tokens.Text;\n            body += '\\n' + this.renderer.text(textToken);\n          }\n          if (top) {\n            out += this.renderer.paragraph({\n              type: 'paragraph',\n              raw: body,\n              text: body,\n              tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n            });\n          } else {\n            out += body;\n          }\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens: Token[], renderer: _Renderer | _TextRenderer = this.renderer): string {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token);\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(token);\n          break;\n        }\n        case 'em': {\n          out += renderer.em(token);\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token);\n          break;\n        }\n        case 'br': {\n          out += renderer.br(token);\n          break;\n        }\n        case 'del': {\n          out += renderer.del(token);\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport class _Hooks {\n  options: MarkedOptions;\n  block?: boolean;\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess',\n    'processAllTokens',\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown: string) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html: string) {\n    return html;\n  }\n\n  /**\n   * Process all tokens before walk tokens\n   */\n  processAllTokens(tokens: Token[] | TokensList) {\n    return tokens;\n  }\n\n  /**\n   * Provide function to tokenize markdown\n   */\n  provideLexer() {\n    return this.block ? _Lexer.lex : _Lexer.lexInline;\n  }\n\n  /**\n   * Provide function to parse tokens\n   */\n  provideParser() {\n    return this.block ? _Parser.parse : _Parser.parseInline;\n  }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, Tokens, TokensList } from './Tokens.ts';\n\nexport type MaybePromise = void | Promise<void>;\n\ntype UnknownFunction = (...args: unknown[]) => unknown;\ntype GenericRendererFunction = (...args: unknown[]) => string | false;\n\nexport class Marked {\n  defaults = _getDefaults();\n  options = this.setOptions;\n\n  parse = this.parseMarkdown(true);\n  parseInline = this.parseMarkdown(false);\n\n  Parser = _Parser;\n  Renderer = _Renderer;\n  TextRenderer = _TextRenderer;\n  Lexer = _Lexer;\n  Tokenizer = _Tokenizer;\n  Hooks = _Hooks;\n\n  constructor(...args: MarkedExtension[]) {\n    this.use(...args);\n  }\n\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n    let values: MaybePromise[] = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          const tableToken = token as Tokens.Table;\n          for (const cell of tableToken.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of tableToken.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          const listToken = token as Tokens.List;\n          values = values.concat(this.walkTokens(listToken.items, callback));\n          break;\n        }\n        default: {\n          const genericToken = token as Tokens.Generic;\n          if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n              const tokens = genericToken[childTokens].flat(Infinity) as Token[] | TokensList;\n              values = values.concat(this.walkTokens(tokens, callback));\n            });\n          } else if (genericToken.tokens) {\n            values = values.concat(this.walkTokens(genericToken.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args: MarkedExtension[]) {\n    const extensions: MarkedOptions['extensions'] = this.defaults.extensions || { renderers: {}, childTokens: {} };\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack } as MarkedOptions;\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if ('renderer' in ext) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if ('tokenizer' in ext) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            const extLevel = extensions[ext.level];\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          if (!(prop in renderer)) {\n            throw new Error(`renderer '${prop}' does not exist`);\n          }\n          if (['options', 'parser'].includes(prop)) {\n            // ignore options property\n            continue;\n          }\n          const rendererProp = prop as Exclude<keyof _Renderer, 'options' | 'parser'>;\n          const rendererFunc = pack.renderer[rendererProp] as GenericRendererFunction;\n          const prevRenderer = renderer[rendererProp] as GenericRendererFunction;\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[rendererProp] = (...args: unknown[]) => {\n            let ret = rendererFunc.apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return ret || '';\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          if (!(prop in tokenizer)) {\n            throw new Error(`tokenizer '${prop}' does not exist`);\n          }\n          if (['options', 'rules', 'lexer'].includes(prop)) {\n            // ignore options, rules, and lexer properties\n            continue;\n          }\n          const tokenizerProp = prop as Exclude<keyof _Tokenizer, 'options' | 'rules' | 'lexer'>;\n          const tokenizerFunc = pack.tokenizer[tokenizerProp] as UnknownFunction;\n          const prevTokenizer = tokenizer[tokenizerProp] as UnknownFunction;\n          // Replace tokenizer with func to run extension, but fall back if false\n          // @ts-expect-error cannot type tokenizer function dynamically\n          tokenizer[tokenizerProp] = (...args: unknown[]) => {\n            let ret = tokenizerFunc.apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          if (!(prop in hooks)) {\n            throw new Error(`hook '${prop}' does not exist`);\n          }\n          if (['options', 'block'].includes(prop)) {\n            // ignore options and block properties\n            continue;\n          }\n          const hooksProp = prop as Exclude<keyof _Hooks, 'options' | 'block'>;\n          const hooksFunc = pack.hooks[hooksProp] as UnknownFunction;\n          const prevHook = hooks[hooksProp] as UnknownFunction;\n          if (_Hooks.passThroughHooks.has(prop)) {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (arg: unknown) => {\n              if (this.defaults.async) {\n                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (...args: unknown[]) => {\n              let ret = hooksFunc.apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n        opts.walkTokens = function(token) {\n          let values: MaybePromise[] = [];\n          values.push(packWalktokens.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt: MarkedOptions) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  lexer(src: string, options?: MarkedOptions) {\n    return _Lexer.lex(src, options ?? this.defaults);\n  }\n\n  parser(tokens: Token[], options?: MarkedOptions) {\n    return _Parser.parse(tokens, options ?? this.defaults);\n  }\n\n  private parseMarkdown(blockType: boolean) {\n    type overloadedParse = {\n      (src: string, options: MarkedOptions & { async: true }): Promise<string>;\n      (src: string, options: MarkedOptions & { async: false }): string;\n      (src: string, options?: MarkedOptions | null): string | Promise<string>;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const parse: overloadedParse = (src: string, options?: MarkedOptions | null): any => {\n      const origOpt = { ...options };\n      const opt = { ...this.defaults, ...origOpt };\n\n      const throwError = this.onError(!!opt.silent, !!opt.async);\n\n      // throw error if an extension set async to true but parse was called with async: false\n      if (this.defaults.async === true && origOpt.async === false) {\n        return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n      }\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n        opt.hooks.block = blockType;\n      }\n\n      const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n      const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n          .then(src => lexer(src, opt))\n          .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n          .then(tokens => parser(tokens, opt))\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n          .catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src) as string;\n        }\n        let tokens = lexer(src, opt);\n        if (opt.hooks) {\n          tokens = opt.hooks.processAllTokens(tokens);\n        }\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html) as string;\n        }\n        return html;\n      } catch (e) {\n        return throwError(e as Error);\n      }\n    };\n\n    return parse;\n  }\n\n  private onError(silent: boolean, async: boolean) {\n    return (e: Error): string | Promise<string> => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      throw e;\n    };\n  }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport {\n  _getDefaults,\n  changeDefaults,\n  _defaults,\n} from './defaults.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\nimport type { MaybePromise } from './Instance.ts';\n\nconst markedInstance = new Marked();\n\n/**\n * Compiles markdown to HTML asynchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options, having async: true\n * @return Promise of string of compiled HTML\n */\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\n\n/**\n * Compiles markdown to HTML.\n *\n * @param src String of markdown source to be compiled\n * @param options Optional hash of options\n * @return String of compiled HTML. Will be a Promise of string if async is set to true by any extensions.\n */\nexport function marked(src: string, options: MarkedOptions & { async: false }): string;\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\nexport function marked(src: string, options?: MarkedOptions | null): string | Promise<string>;\nexport function marked(src: string, opt?: MarkedOptions | null): string | Promise<string> {\n  return markedInstance.parse(src, opt);\n}\n\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\nmarked.setOptions = function(options: MarkedOptions) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\n\nmarked.defaults = _defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args: MarkedExtension[]) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\n\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\nexport type * from './MarkedOptions.ts';\nexport type * from './Tokens.ts';\n","export default \"---\\r\\ntitle: Мой первый блог\\r\\ndate: 2025-06-01\\r\\ndescription: Начало лета и сайта\\r\\ntags: мысли\\r\\n---\\r\\n\\r\\n# Привет, мир!\\r\\n\\r\\nЭто мой первый блог на личном сайте. Здесь буду делиться мыслями и информацией на разные темы. По мере существования в интернете я понял, что требуется централизованное место обо мне. Этим и будет данный сайт 😉\\r\\n\\r\\n## О чем будут статьи\\r\\n\\r\\n- Текстовые гайды по языкам программирования\\r\\n- Личная философия (которой нет в [Telegram группе](https://t.me/darkfated_group))\\r\\n- Обзоры\\r\\n- Меньше ограничений - как всё пойдёт!\\r\\n\\r\\n**Следите за обновлениями**\\r\\n\";","import { marked } from \"marked\"\r\n\r\nimport firstpost from \"!raw-loader!./posts/firstpost.md\"\r\n\r\nconst postFiles = {\r\n  firstpost: firstpost,\r\n}\r\n\r\nfunction parseFrontMatter(content) {\r\n  const frontMatterRegex = /^---\\s*\\n([\\s\\S]*?)\\n\\s*---/\r\n  const match = content.match(frontMatterRegex)\r\n\r\n  if (!match) {\r\n    console.warn(\"Фронтматтер не найден:\", content.substring(0, 100))\r\n    return { content, metadata: {} }\r\n  }\r\n\r\n  const frontMatter = match[1]\r\n  const metadata = {}\r\n\r\n  frontMatter.split(\"\\n\").forEach(line => {\r\n    const colonIndex = line.indexOf(\":\")\r\n    if (colonIndex !== -1) {\r\n      const key = line.slice(0, colonIndex).trim()\r\n      const value = line.slice(colonIndex + 1).trim()\r\n      metadata[key] = value\r\n    }\r\n  })\r\n\r\n  const contentWithoutFrontMatter = content.replace(match[0], \"\").trim()\r\n\r\n  return {\r\n    content: contentWithoutFrontMatter,\r\n    metadata,\r\n  }\r\n}\r\n\r\nfunction parseDate(dateStr) {\r\n  if (!dateStr) return new Date(0)\r\n  return new Date(dateStr)\r\n}\r\n\r\nexport async function getAllPosts() {\r\n  const posts = []\r\n\r\n  for (const [slug, content] of Object.entries(postFiles)) {\r\n    if (typeof content !== \"string\") {\r\n      console.error(`Ошибка: содержимое ${slug} не является строкой:`, content)\r\n      continue\r\n    }\r\n\r\n    const { content: postContent, metadata } = parseFrontMatter(content)\r\n\r\n    posts.push({\r\n      slug,\r\n      content: postContent,\r\n      html: marked(postContent),\r\n      title: metadata.title || \"Без названия\",\r\n      date: metadata.date || \"\",\r\n      parsedDate: parseDate(metadata.date),\r\n      description: metadata.description || \"\",\r\n      tags: metadata.tags\r\n        ? metadata.tags.split(\",\").map(tag => tag.trim())\r\n        : [],\r\n    })\r\n  }\r\n\r\n  return posts.sort((a, b) => b.parsedDate - a.parsedDate)\r\n}\r\n\r\nexport async function getPostBySlug(slug) {\r\n  const posts = await getAllPosts()\r\n  return posts.find(post => post.slug === slug)\r\n}\r\n\r\nexport async function getPostsByTag(tag) {\r\n  const posts = await getAllPosts()\r\n  return posts.filter(post =>\r\n    post.tags.some(t => t.toLowerCase() === tag.toLowerCase())\r\n  )\r\n}\r\n\r\nexport function formatDate(dateStr) {\r\n  if (!dateStr) return \"\"\r\n\r\n  const date = new Date(dateStr)\r\n  return date.toLocaleDateString(\"ru-RU\", {\r\n    day: \"numeric\",\r\n    month: \"long\",\r\n    year: \"numeric\",\r\n  })\r\n}\r\n","import { render } from \"./BlogView.vue?vue&type=template&id=1691eae0&scoped=true\"\nimport script from \"./BlogView.vue?vue&type=script&lang=js\"\nexport * from \"./BlogView.vue?vue&type=script&lang=js\"\n\nimport \"./BlogView.vue?vue&type=style&index=0&id=1691eae0&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-1691eae0\"]])\n\nexport default __exports__"],"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","$data","currentPost","title","_hoisted_6","$options","formatDate","date","_hoisted_5","_hoisted_7","searchQuery","$event","type","placeholder","_hoisted_8","onClick","_cache","args","backToList","_hoisted_9","_hoisted_10","loading","error","_createBlock","_TransitionGroup","name","tag","_Fragment","_renderList","filteredPosts","post","key","slug","navigateToPost","role","tabindex","onKeydown","_withKeys","_withModifiers","_hoisted_12","_hoisted_13","description","_hoisted_14","_hoisted_15","tags","length","_hoisted_16","slice","t","i","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_createVNode","_Transition","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","innerHTML","html","_hoisted_28","_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","noopTest","exec","edit","regex","opt","source","obj","replace","val","valSource","other","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","bull","nextBulletRegex","indent","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","newline","blockCode","fences","hr","heading","bullet","lheadingCore","lheading","lheadingGfm","_paragraph","blockText","_blockLabel","def","list","_tag","_comment","paragraph","blockquote","blockNormal","code","table","text","gfmTable","blockGfm","blockPedantic","escape","inlineCode","br","inlineText","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","_punctuationGfmStrongEm","_punctuationOrSpaceGfmStrongEm","_notPunctuationOrSpaceGfmStrongEm","blockSkip","emStrongLDelimCore","emStrongLDelim","emStrongLDelimGfm","emStrongRDelimAstCore","emStrongRDelimAst","emStrongRDelimAstGfm","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","_inlineLabel","link","reflink","nolink","reflinkSearch","inlineNormal","_backpedal","del","url","inlinePedantic","inlineGfm","inlineBreaks","block","normal","inline","escapeReplacements","getEscapeReplacement","ch","escape2","html2","encode","test","cleanUrl","href","encodeURI","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","trim","shift","at","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","charAt","findClosingBracket","b","indexOf","level","outputLink","cap","link2","raw","lexer2","rules","state","inLink","token","tokens","inlineTokens","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","options","lexer","constructor","options2","this","space","src","codeBlockStyle","lang","trimmed","depth","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","isordered","list2","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","repeat","nextLine","trimStart","search","rawLine","nextLineWithoutTabs","ischecked","istask","task","checked","lastItem","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","tag2","toLowerCase","headers","aligns","rows","item","header","align","cell","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","links","linkString","emStrong","maskedSrc","prevChar","nextChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastIndex","lastCharLength","index","text2","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","_Lexer","__Lexer","inlineQueue","Object","create","lex","lexInline","next","lastParagraphClipped","extTokenizer","call","cutSrc","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","Error","keys","includes","lastIndexOf","keepPrevChar","startInline","_Renderer","parser","langString","body","parse","parseInline","j","listitem","startAttr","itemBody","checkbox","unshift","tablecell","tablerow","k","content","strong","em","cleanHref","out","image","textRenderer","_TextRenderer","_Parser","__Parser","parser2","anyToken","renderers","genericToken","ret","textToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","Marked","defaults","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","use","callback","values","concat","tableToken","listToken","childTokens","tokens2","flat","pack","opts","ext","prevRenderer","args2","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","ret2","walkTokens2","packWalktokens","blockType","parse2","origOpt","throwError","onError","prototype","toString","src2","all","catch","e","message","msg","reject","markedInstance","marked","getDefaults","postFiles","firstpost","parseFrontMatter","frontMatterRegex","warn","metadata","frontMatter","colonIndex","value","contentWithoutFrontMatter","parseDate","dateStr","Date","getAllPosts","posts","entries","postContent","parsedDate","sort","a","getPostBySlug","find","toLocaleDateString","day","month","year","data","computed","$route","params","q","p","methods","loadPosts","loadCurrentPost","$router","watch","created","__exports__","render"],"sourceRoot":""}